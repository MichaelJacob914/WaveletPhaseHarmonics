#This file contains the code for the Gabor Wavelet, another anisotropic wavelet not featured in S2WAV. It is currently not being used in 
#calculation of the WPH moments as S2WAVs convolution on the sphere does not allow for external input of wavelets but may be used later
#with a self-implemented form of convolution for comparison. In this code, the standard np.cov is used though this is not accurate for spherical convolutoins

import healpy as hp
import numpy as np
import numpy as numpy
import copy
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
from pylab import cm
import torch.nn as nn
from scipy.special import sph_harm, factorial
from scipy import ndimage
from scipy import signal
import time
import warnings
import torch

def convert_to_pix_coord(ra, dec, nside=512):
    """
    Converts RA, DEC to HEALPix pixel coordinates.

    Args:
        ra (array): Right Ascension values.
        dec (array): Declination values.
        nside (int, optional): HEALPix nside parameter. Defaults to 512.

    Returns:
        array: HEALPix pixel coordinates.
    """
    theta = (90.0 - dec) * np.pi / 180.
    phi = ra * np.pi / 180.
    pix = hp.ang2pix(nside, theta, phi, nest=False)
    return pix

def IndexToDeclRa(index, nside, nest=False):
    """
    Converts HEALPix index to Declination and Right Ascension.

    Args:
        index (array): HEALPix pixel indices.
        nside (int): HEALPix nside parameter.
        nest (bool, optional): Nesting scheme of the HEALPix pixels. Defaults to False.

    Returns:
        tuple: Declination and Right Ascension.
    """
    theta, phi = hp.pixelfunc.pix2ang(nside, index, nest=nest)
    return theta, phi
    #return -np.degrees(theta - np.pi / 2.), np.degrees(phi)

def gabor_3(azimuthal, polar, L, J, l, j, n = 0, alpha = 0):
    """
    Wavelet used in WPH at each dyadic scale j and roatiton L.

    Args:
    
    Returns:
        array of values of the Directional Morlet Wavelet for each value of theta, phi
    """
    a = azimuthal
    p = polar + np.pi * l/L
    kx = 6
    ky = 0
    j = j
    ks = kx ** 2 + ky ** 2
    tau_x = n*(2**j)*np.cos(p+alpha)
    tau_y = n*(2**j)*np.sin(p+alpha)

    Nk = ((1 + (3 * np.exp(-ks/2)) - (4 * np.exp(-3*ks/8)))**(-1/2))

    t1 = np.exp(-2 * np.tan(p/2) ** 2 * 2**j)
    t2 = np.exp(2j/np.sqrt(2) * np.tan(p/2) *  (kx * (np.cos(a) + tau_x) + ky * (np.sin(a) + tau_y) * 2**j))
    t3 = np.exp(-ks/4)
    GABOR = np.sqrt(2/np.pi) * Nk * (1 + np.tan(p/2) ** 2) * t1 * (t2 - t3)
    return GABOR

class WaveletPhaseHarmonics:
  """
  WaveletPhaseHarmonics is a class performing the calculations for the 5
  moments of the wavelet phase harmonics statistical method on a sphere
  """
  def __init__(self,tensor_field, J, L, azimuthal, polar, device = 'cpu'):
    #Parameters passed in through constructor
      self.tensor_field = tensor_field
      self.J = J
      self.L = L
      self.azimuthal = azimuthal
      self.polar = polar
      self.device = device
      self.Moments = dict()
      self.Indices = dict()
      #Taus
      self.tau_s_0_0 = self.fill_tau([2])
      self.tau_s_0_1 = self.fill_tau([0])
      self.tau_s_1_1 = self.fill_tau([2])
      self.tau_c_0_0 = self.fill_tau([2])
      self.tau_c_0_1 = self.fill_tau([2])
  
  def fill_tau(self, j_list = [0]):
        '''
        In various papers, the value of tau is fixed for a given moment or the
        authors choose to specify that for any given j-scale, the value of tau
        ranges by a certain amount.
        Inputs: j_list
        If the length of j_list is 1, this value corresponds to the value of
        delta_n for all scales
        If the length of j_list is J, this function
        Returns: 3D array storing each combination of j, delta_n, alpha
        '''

        alphas = [-np.pi/4, 0, np.pi/4, np.pi/2]
        #for each j
        if len(j_list) == 1:
            tau = list()
            if j_list[0] == 0:
                temp = numpy.empty(shape = (1,1), dtype = tuple)
                temp[0][0] = (0,0)
                tau.append(temp)
                #tau = numpy.empty(shape = (1,1,1), dtype = tuple)
                #tau[0][0][0] = (0,0)
                return tau

            tau = list()
            delta_n = j_list[0]
            temp = numpy.empty(shape = (delta_n, 4),  dtype = tuple)
            #tau = numpy.empty(shape = (1, delta_n, 4), dtype = tuple)
            for n in range(delta_n):
                for i in range(4):
                    temp[n][i] = (n, alphas[i])

            tau.append(temp)

            return tau
        elif len(j_list) != J:
            raise Exception("Length of list must match number of scales")
        tau = list()
        #tau = numpy.empty(shape = (len(j_list), delta_n, 4), dtype = tuple)

        for j in j_list:
            if j == 0:
                temp = numpy.empty(shape = (1,1), dtype = tuple)
                temp[0][0] = 0
                tau.append(temp)
            else:
                temp = numpy.empty(shape = (j, 4), dtype = tuple)
                for n in range(j):
                    for i in range(4):
                        temp[n][i] = (n, alphas[i])
                #tau[j] = temp[n][i]
                tau.append(temp)
        return tau

  def moments_calculator(self, J = -1,L = -1):
      if(J != -1):
        self.J = J
      if(L != -1):
        self.L = L
      J = self.J
      L = self.L
      (s_0_0_moments, s_0_0_indices) = self.S_0_0_moments_calculator(self.tau_s_0_0, self.J, self.L)
      (s_0_1_moments, s_0_1_indices) = self.S_0_1_moments_calculator(self.tau_s_0_1, self.J, self.L)
      (s_1_1_moments, s_1_1_indices) = self.S_1_1_moments_calculator(self.tau_s_1_1, self.J, self.L)
      (c_0_1_moments, c_0_1_indices) = self.C_0_1_moments_calculator(self.tau_s_0_1, self.tau_c_0_1, self.J, self.L)
      (c_0_0_moments, c_0_0_indices) = self.C_0_0_moments_calculator(self.tau_c_0_0, self.J, self.L)
      
      self.Moments['S00'] = s_0_0_moments
      self.Moments['S01'] = s_0_1_moments
      self.Moments['S11'] = s_1_1_moments
      self.Moments['C01'] = c_0_1_moments
      self.Moments['C00'] = c_0_0_moments

      self.Indices['S00'] = s_0_0_indices
      self.Indices['S01'] = s_0_1_indices
      self.Indices['S11'] = s_1_1_indices
      self.Indices['C01'] = c_0_1_indices
      self.Indices['C00'] = c_0_0_indices

  def get_coeffs(self, st):
    x = self.Moments.get(st)
    print(type(x))
    print('test 2 print above')
    return (self.Moments.get(st), self.Indices.get(st))

  def S_0_0_moments_calculator(self, tau_s_0_0, J, L):
    tensor_field = self.tensor_field
    taus = tau_s_0_0
    moments = list()
    j_list = list()
    for j in range(J):
      for l in range(2 *L):
        wavelet_1 = gabor_3(self.azimuthal, self.polar, L, J, l, j)
        #print("shape of wavelet 1 is", wavelet_1.shape)
        moment_1 = signal.fftconvolve(tensor_field, wavelet_1, mode = 'same')
        for tau in taus:
          for row in tau:
            for (n, alpha) in row:
              wavelet_2 = gabor_3(self.azimuthal, self.polar, L, J, l, j, n, alpha)
              moment_2 = signal.fftconvolve(tensor_field, wavelet_2, mode = 'same')
              moment = np.cov(moment_1, moment_2)
              moments.append(moment)
              j_list.append(j)
    return (moments, j_list)

  def S_0_1_moments_calculator(self, tau_s_0_1, J, L):
    tensor_field = self.tensor_field
    taus = tau_s_0_1
    moments = list()
    j_list = list()
    for j in range(J):
      for l in range(2 * L):
        wavelet_1 = gabor_3(self.azimuthal, self.polar, L, J, l, j)
        moment_1 = signal.fftconvolve(tensor_field, wavelet_1, mode = 'same')
        moment_1 = abs(moment_1)
        for tau in taus:
          for row in tau:
            for (n, alpha) in row:
              if (n <= (J - j - 1)):
                wavelet_2 = gabor_3(self.azimuthal, self.polar, L, J, l, j, n, alpha)
                moment_2 = signal.fftconvolve(tensor_field, wavelet_2, mode = 'same')
                moment = np.cov(moment_1, moment_2)
                moments.append(moment)
                j_list.append(j)
    return (moments, j_list)

  def S_1_1_moments_calculator(self, tau_s_1_1, J, L):
    tensor_field = self.tensor_field
    taus = tau_s_1_1
    moments = list()
    j_list = list()
    for j in range(J):
      for l in range(2 * L):
        wavelet_1 = gabor_3(self.azimuthal, self.polar, L, J, l, j)
        moment_1 = signal.fftconvolve(tensor_field, wavelet_1, mode = 'same')
        moment_1 = abs(moment_1)
        for tau in taus:
            for row in tau:
                for (n, alpha) in row:
                    if (n <= (J - j - 1)):
                        wavelet_2 = gabor_3(self.azimuthal, self.polar, L, J, l, j, n, alpha)
                        moment_2 = signal.fftconvolve(tensor_field, wavelet_2, mode = 'same')
                        moment_2 = abs(moment_2)
                        moment = np.cov(moment_1, moment_2)
                        moments.append(moment)
                        j_list.append(j)
    return (moments, j_list)

  def C_0_0_moments_calculator(self, tau_c_0_0, J, L):
    tensor_field = self.tensor_field
    taus = tau_c_0_0
    moments = list()
    j_list = list()
    for j2 in range(1, J):
      for j1 in range(j2):
          for l1 in range(2 * L):
            for l2 in range(2 * L):
                if (l1 == l2):
                    wavelet_1 = gabor_3(self.azimuthal, self.polar, L, J, l1, j1)
                    moment_1 = signal.fftconvolve(tensor_field, wavelet_1, mode = 'same')
                    moment_1 = abs(moment_1)
                    for tau in taus:
                        for row in tau:
                            for (n, alpha) in row:
                                if (n <= (J - j2 - 1)):
                                    wavelet_2 = gabor_3(self.azimuthal, self.polar, L, J, l2, j2, n, alpha)
                                    moment_2 = signal.fftconvolve(tensor_field, wavelet_2, mode = 'same')
                                    moment = np.cov(moment_1, moment_2)
                                    moments.append(moment)
                                    j_list.append((j1,j2))
    return (moments, j_list)

  def C_0_1_moments_calculator(self, tau_s_0_1, tau_c_0_1, J, L):
    tensor_field = self.tensor_field
    taus = tau_c_0_1
    moments = list()
    j_list = list()
    for j2 in range(1, J):
      for j1 in range(j2):
          for l1 in range(2*L):
              for l2 in range(2 * L):
                  diff = abs(((l1 * np.pi)/L) - ((l2 * np.pi)/L))
                  if(l1 == l2):
                      taus = tau_c_0_1
                      wavelet_1 = gabor_3(self.azimuthal, self.polar, L, J, l1, j1)
                      moment_1 = signal.fftconvolve(tensor_field, wavelet_1, mode = 'same')
                      moment_1 = abs(moment_1)
                      for tau in taus:
                          for row in tau:
                              for (n, alpha) in row:
                                  if (n <= (J - j2 - 1)):
                                      wavelet_2 = gabor_3(self.azimuthal, self.polar, L, J, l2, j2, n, alpha)
                                      moment_2 = signal.fftconvolve(tensor_field, wavelet_2, mode = 'same')
                                      moment = np.cov(moment_1, moment_2)
                                      moments.append(moment)
                                      j_list.append((j1,j2))
                  elif(diff <= np.pi/2):
                      taus = tau_s_0_1
                      wavelet_1 = gabor_3(self.azimuthal, self.polar, L, J, l1, j1)
                      moment_1 = signal.fftconvolve(tensor_field, wavelet_1, mode = 'same')
                      moment_1 = abs(moment_1)
                      for tau in taus:
                          for row in tau:
                              for (n, alpha) in row:
                                  if (n <= (J - j2 - 1)):
                                      wavelet_2 = gabor_3(self.azimuthal, self.polar, L, J, l2, j2, n, alpha)
                                      moment_2 = signal.fftconvolve(tensor_field, wavelet_2, mode = 'same')
                                      moment = np.cov(moment_1, moment_2)
                                      moments.append(moment)
                                      j_list.append((j1,j2))
    return (moments, j_list)
